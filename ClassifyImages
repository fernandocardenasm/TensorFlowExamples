import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt


class ClassifyImages:
    class_names = ["T-shirt/top",
                   "Trouser",
                   "Pullover",
                   "Dress",
                   "Coat",
                   "Sandal",
                   "Shirt",
                   "Sneaker",
                   "Bag",
                   "Ankle boot"]

    def main(self):
        fashion_mnist = tf.keras.datasets.fashion_mnist
        (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

        plt.figure(1)
        plt.imshow(train_images[0])
        plt.colorbar()
        plt.grid(False)

        train_images = train_images / 255.0
        test_images = test_images / 255.0

        plt.figure(2, figsize = (10, 10))
        for i in range(25):
            plt.subplot(5, 5, i + 1)
            plt.xticks([])
            plt.yticks([])
            plt.grid(False)
            plt.imshow(train_images[i], cmap = plt.cm.binary)
            plt.xlabel(self.class_names[train_labels[i]])

        model = tf.keras.Sequential([
            tf.keras.layers.Flatten(input_shape = (28, 28)),
            tf.keras.layers.Dense(128, activation = "relu"),
            tf.keras.layers.Dense(10, activation = "softmax")
        ])

        model.compile(optimizer = "adam",
                      loss = "sparse_categorical_crossentropy",
                      metrics = ["accuracy"])

        model.fit(train_images, train_labels, epochs = 10)

        test_loss, test_acc = model.evaluate(test_images, test_labels)

        print("\nTest accuracy:", test_acc)

        # Make Predictions
        predictions = model.predict(test_images)
        predictions[0]

        # show can only be called once. If stops the execution of the code, until the figure is closed.
        # plt.show()


if __name__ == "__main__":
    ClassifyImages().main()
